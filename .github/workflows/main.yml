name: Build NVIDIA Streamline for Windows x64

on:
  workflow_dispatch: # Allows manual triggering from the Actions tab
  push:
    branches:
      - main # IMPORTANT: Change 'main' to your repository's default branch if it's different (e.g., master, develop)

jobs:
  build_windows_x64:
    runs-on: windows-latest # Uses the latest Windows runner, typically windows-2022

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true # Streamline uses Git LFS for some large files

      - name: Set up MSVC (Visual Studio C++ toolset)
        uses: microsoft/setup-msvc@v2
        with:
         vs-version: 'latest'
          # This action sets up the Developer Command Prompt environment.
          # CMake and Ninja (if bundled with VS) should be available in PATH.
          # vs-version: 'latest' # You can specify a VS version or let it pick the latest.

      - name: Download Vulkan SDK
        shell: pwsh # Using PowerShell for scripting consistency
        run: |
          $ErrorActionPreference = "Stop" # Exit script on any error
          $VULKAN_SDK_VERSION = "1.3.268.0" # This version is used in Streamline's own CI and is known to be compatible
          $VULKAN_SDK_URL = "https://sdk.lunarg.com/sdk-installer/$VULKAN_SDK_VERSION/windows/VulkanSDK-$VULKAN_SDK_VERSION-Installer.exe"
          $VULKAN_SDK_EXE_FILENAME = "VulkanSDK-Installer.exe"
          
          Write-Host "Downloading Vulkan SDK version $VULKAN_SDK_VERSION from $VULKAN_SDK_URL..."
          Invoke-WebRequest -Uri $VULKAN_SDK_URL -OutFile $VULKAN_SDK_EXE_FILENAME
          Write-Host "Vulkan SDK installer downloaded as $VULKAN_SDK_EXE_FILENAME."
          
          # Optional: Add a SHA256 hash check for the downloaded installer for enhanced security
          # $EXPECTED_HASH = "YOUR_EXPECTED_SHA256_HASH_HERE"
          # $DOWNLOADED_HASH = (Get-FileHash $VULKAN_SDK_EXE_FILENAME -Algorithm SHA256).Hash
          # if ($DOWNLOADED_HASH -ne $EXPECTED_HASH) {
          #   throw "Vulkan SDK installer hash mismatch! Expected $EXPECTED_HASH but got $DOWNLOADED_HASH."
          # }
          # Write-Host "Vulkan SDK installer hash verified."

      - name: Install Vulkan SDK
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $VULKAN_SDK_EXE_FILENAME = "VulkanSDK-Installer.exe"
          $VULKAN_SDK_VERSION_PATH_COMPONENT = "1.3.268.0" # This must match the version number in the SDK's installation path
          $VULKAN_SDK_BASE_INSTALL_PATH = "C:\VulkanSDK" # Default installation directory for the Vulkan SDK
          $VULKAN_SDK_FULL_INSTALL_PATH = Join-Path $VULKAN_SDK_BASE_INSTALL_PATH $VULKAN_SDK_VERSION_PATH_COMPONENT

          Write-Host "Installing Vulkan SDK silently..."
          # The /S argument performs a silent installation. Start-Process with -Wait ensures completion.
          Start-Process -FilePath ".\$VULKAN_SDK_EXE_FILENAME" -ArgumentList "/S" -Wait -NoNewWindow
          Write-Host "Vulkan SDK installation process completed."

          Write-Host "Setting VULKAN_SDK environment variable to $VULKAN_SDK_FULL_INSTALL_PATH for subsequent steps."
          "VULKAN_SDK=$VULKAN_SDK_FULL_INSTALL_PATH" | Add-Content -Path $env:GITHUB_ENV

          Write-Host "Adding Vulkan SDK Bin directory to PATH: $($VULKAN_SDK_FULL_INSTALL_PATH)\Bin"
          "$($VULKAN_SDK_FULL_INSTALL_PATH)\Bin" | Add-Content -Path $env:GITHUB_PATH

          Remove-Item $VULKAN_SDK_EXE_FILENAME # Clean up the installer
          Write-Host "Vulkan SDK setup finished and installer removed."

      - name: Create build directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "_build" | Out-Null
          Write-Host "Build directory '_build' created."

      - name: Configure CMake project
        shell: pwsh
        working-directory: _build # Subsequent commands will run in this directory
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Configuring CMake for Streamline..."
          Write-Host "Current VULKAN_SDK environment variable is: $env:VULKAN_SDK" # Verify VULKAN_SDK is available
          
          # CMake arguments based on Streamline's CI practices:
          # -A x64: Target 64-bit architecture
          # -GNinja: Use the Ninja build system (generally faster)
          # -DCMAKE_BUILD_TYPE=Release: Build Release configuration
          # Streamline-specific flags for CI builds:
          cmake .. -A x64 -GNinja `
            -DCMAKE_BUILD_TYPE=Release `
            -DSL_SKIP_PROGRAMDB_AND_DISASSEMBLY_GENERATION=ON `
            -DSL_VALIDATION_TESTS_USE_SYSTEM_DIR=ON `
            -DSL_PLUGIN_NVPCF_ENABLE_SIGNED_SHIPPING_DRIVER=OFF `
            -DSL_WINDOWS_FORCE_CONSOLE_LAUNCH=ON
          Write-Host "CMake configuration finished."

      - name: Build Streamline (all default targets)
        shell: pwsh
        working-directory: _build
        run: |
          $ErrorActionPreference = "Stop"
          Write-Host "Building Streamline with CMake and Ninja..."
          # This will build all default targets in the Release configuration
          cmake --build . --config Release
          Write-Host "Streamline build completed."

      - name: Prepare Artifact for Upload
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          $ARTIFACT_STAGING_DIR = "Streamline-SDK-Package" # Temporary directory to gather files for the artifact
          
          Write-Host "Creating artifact staging directory: $ARTIFACT_STAGING_DIR"
          New-Item -ItemType Directory -Force -Path $ARTIFACT_STAGING_DIR | Out-Null
          New-Item -ItemType Directory -Force -Path (Join-Path $ARTIFACT_STAGING_DIR "include") | Out-Null
          New-Item -ItemType Directory -Force -Path (Join-Path $ARTIFACT_STAGING_DIR "bin" "x64") | Out-Null
          New-Item -ItemType Directory -Force -Path (Join-Path $ARTIFACT_STAGING_DIR "lib" "x64") | Out-Null

          Write-Host "Copying Streamline header files..."
          Copy-Item -Path "${{ github.workspace }}/include/*" -Destination (Join-Path $ARTIFACT_STAGING_DIR "include/") -Recurse -Force
          
          Write-Host "Copying built DLLs..."
          Get-ChildItem -Path "_build/output/Release/*.dll" | Copy-Item -Destination (Join-Path $ARTIFACT_STAGING_DIR "bin" "x64/") -Force
          
          Write-Host "Copying built LIBs..."
          Get-ChildItem -Path "_build/output/Release/*.lib" | Copy-Item -Destination (Join-Path $ARTIFACT_STAGING_DIR "lib" "x64/") -Force
          
          # Optional: If PDBs (debug symbols) are generated and desired, copy them too.
          # Note: DSL_SKIP_PROGRAMDB_AND_DISASSEMBLY_GENERATION=ON currently likely prevents PDB generation.
          # Write-Host "Copying PDBs (if any)..."
          # Get-ChildItem -Path "_build/output/Release/*.pdb" -ErrorAction SilentlyContinue | Copy-Item -Destination (Join-Path $ARTIFACT_STAGING_DIR "bin" "x64/") -Force
          
          Write-Host "Artifact preparation complete. Contents staged in '$ARTIFACT_STAGING_DIR'."

      - name: Upload Streamline SDK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Streamline-SDK-Windows-x64-Release # Name of the artifact to be uploaded
          path: Streamline-SDK-Package/ # Path to the directory containing files to be archived
          if-no-files-found: error # Fail the workflow if the specified path has no files
